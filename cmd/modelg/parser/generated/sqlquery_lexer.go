// Code generated from SQLQueryLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package generated

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type SQLQueryLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var SQLQueryLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func sqlquerylexerLexerInit() {
	staticData := &SQLQueryLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE", "CommentStart", "Query", "Expr",
	}
	staticData.LiteralNames = []string{
		"", "'--'", "':'", "", "", "", "", "'when'", "'<when'", "'+when'", "",
		"", "", "", "", "", "'.'", "'!'",
	}
	staticData.SymbolicNames = []string{
		"", "STARTCOMMENT", "STARTEXPR", "EOL", "WS", "SQLTEXT", "STARTQUERY",
		"STARTWHEN", "STARTCHOMPWHEN", "STARTJOINWHEN", "ENDWHEN", "ENDCOMMENT",
		"RAWCOMMENT", "QUERY_NAME", "ENDQUERY", "IDENT", "IDENT_SEP", "IDENT_LITERAL",
		"SPACE_EXPR", "WS_EXPR",
	}
	staticData.RuleNames = []string{
		"LINEWS", "NL", "STRING_LITERAL", "QUOTED_IDENTIFIER", "DIGITS", "NUMBER",
		"STARTCOMMENT", "STARTEXPR", "EOL", "WS", "SQLTEXT", "STARTQUERY", "STARTWHEN",
		"STARTCHOMPWHEN", "STARTJOINWHEN", "ENDWHEN", "ENDCOMMENT", "RAWCOMMENT",
		"QUERY_NAME", "ENDQUERY", "IDENT", "IDENT_SEP", "IDENT_LITERAL", "SPACE_EXPR",
		"WS_EXPR", "EOL_EXPR", "SQLTEXT_EXPR",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 19, 280, 6, -1, 6, -1, 6, -1, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2,
		7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8,
		7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13,
		2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2,
		19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24,
		7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 1, 0, 4, 0, 60, 8, 0, 11, 0, 12, 0,
		61, 1, 1, 3, 1, 65, 8, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 73,
		8, 2, 10, 2, 12, 2, 76, 9, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3,
		84, 8, 3, 10, 3, 12, 3, 87, 9, 3, 1, 3, 1, 3, 1, 4, 4, 4, 92, 8, 4, 11,
		4, 12, 4, 93, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 100, 8, 5, 1, 5, 1, 5, 3, 5,
		104, 8, 5, 1, 5, 3, 5, 107, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 113, 8,
		5, 1, 5, 3, 5, 116, 8, 5, 1, 5, 1, 5, 1, 5, 3, 5, 121, 8, 5, 1, 5, 1, 5,
		3, 5, 125, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7,
		1, 7, 1, 8, 1, 8, 1, 9, 4, 9, 140, 8, 9, 11, 9, 12, 9, 141, 1, 9, 1, 9,
		1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 4, 10, 152, 8, 10, 11, 10, 12,
		10, 153, 3, 10, 156, 8, 10, 1, 11, 5, 11, 159, 8, 11, 10, 11, 12, 11, 162,
		9, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 171, 8,
		11, 10, 11, 12, 11, 174, 9, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 210, 8, 15, 10,
		15, 12, 15, 213, 9, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 5, 18, 230, 8,
		18, 10, 18, 12, 18, 233, 9, 18, 1, 19, 5, 19, 236, 8, 19, 10, 19, 12, 19,
		239, 9, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 248,
		8, 20, 10, 20, 12, 20, 251, 9, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25,
		1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 276, 8, 26, 1,
		26, 1, 26, 1, 26, 0, 0, 27, 4, 0, 6, 0, 8, 0, 10, 0, 12, 0, 14, 0, 16,
		1, 18, 2, 20, 3, 22, 4, 24, 5, 26, 6, 28, 7, 30, 8, 32, 9, 34, 10, 36,
		11, 38, 12, 40, 13, 42, 14, 44, 15, 46, 16, 48, 17, 50, 18, 52, 19, 54,
		0, 56, 0, 4, 0, 1, 2, 3, 10, 2, 0, 9, 9, 32, 32, 1, 0, 39, 39, 2, 0, 0,
		0, 34, 34, 1, 0, 48, 57, 2, 0, 43, 43, 45, 45, 3, 0, 9, 9, 13, 13, 32,
		32, 7, 0, 9, 10, 13, 13, 32, 32, 34, 34, 39, 39, 45, 45, 58, 58, 3, 0,
		65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 8, 0, 9,
		10, 13, 13, 32, 32, 34, 34, 39, 39, 45, 45, 58, 58, 64, 64, 301, 0, 16,
		1, 0, 0, 0, 0, 18, 1, 0, 0, 0, 0, 20, 1, 0, 0, 0, 0, 22, 1, 0, 0, 0, 0,
		24, 1, 0, 0, 0, 1, 26, 1, 0, 0, 0, 1, 28, 1, 0, 0, 0, 1, 30, 1, 0, 0, 0,
		1, 32, 1, 0, 0, 0, 1, 34, 1, 0, 0, 0, 1, 36, 1, 0, 0, 0, 1, 38, 1, 0, 0,
		0, 2, 40, 1, 0, 0, 0, 2, 42, 1, 0, 0, 0, 3, 44, 1, 0, 0, 0, 3, 46, 1, 0,
		0, 0, 3, 48, 1, 0, 0, 0, 3, 50, 1, 0, 0, 0, 3, 52, 1, 0, 0, 0, 3, 54, 1,
		0, 0, 0, 3, 56, 1, 0, 0, 0, 4, 59, 1, 0, 0, 0, 6, 64, 1, 0, 0, 0, 8, 68,
		1, 0, 0, 0, 10, 79, 1, 0, 0, 0, 12, 91, 1, 0, 0, 0, 14, 124, 1, 0, 0, 0,
		16, 126, 1, 0, 0, 0, 18, 132, 1, 0, 0, 0, 20, 136, 1, 0, 0, 0, 22, 139,
		1, 0, 0, 0, 24, 155, 1, 0, 0, 0, 26, 160, 1, 0, 0, 0, 28, 177, 1, 0, 0,
		0, 30, 184, 1, 0, 0, 0, 32, 192, 1, 0, 0, 0, 34, 200, 1, 0, 0, 0, 36, 218,
		1, 0, 0, 0, 38, 223, 1, 0, 0, 0, 40, 227, 1, 0, 0, 0, 42, 237, 1, 0, 0,
		0, 44, 245, 1, 0, 0, 0, 46, 252, 1, 0, 0, 0, 48, 254, 1, 0, 0, 0, 50, 256,
		1, 0, 0, 0, 52, 261, 1, 0, 0, 0, 54, 266, 1, 0, 0, 0, 56, 275, 1, 0, 0,
		0, 58, 60, 7, 0, 0, 0, 59, 58, 1, 0, 0, 0, 60, 61, 1, 0, 0, 0, 61, 59,
		1, 0, 0, 0, 61, 62, 1, 0, 0, 0, 62, 5, 1, 0, 0, 0, 63, 65, 5, 13, 0, 0,
		64, 63, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 67, 5,
		10, 0, 0, 67, 7, 1, 0, 0, 0, 68, 74, 5, 39, 0, 0, 69, 73, 8, 1, 0, 0, 70,
		71, 5, 39, 0, 0, 71, 73, 5, 39, 0, 0, 72, 69, 1, 0, 0, 0, 72, 70, 1, 0,
		0, 0, 73, 76, 1, 0, 0, 0, 74, 72, 1, 0, 0, 0, 74, 75, 1, 0, 0, 0, 75, 77,
		1, 0, 0, 0, 76, 74, 1, 0, 0, 0, 77, 78, 5, 39, 0, 0, 78, 9, 1, 0, 0, 0,
		79, 85, 5, 34, 0, 0, 80, 81, 5, 34, 0, 0, 81, 84, 5, 34, 0, 0, 82, 84,
		8, 2, 0, 0, 83, 80, 1, 0, 0, 0, 83, 82, 1, 0, 0, 0, 84, 87, 1, 0, 0, 0,
		85, 83, 1, 0, 0, 0, 85, 86, 1, 0, 0, 0, 86, 88, 1, 0, 0, 0, 87, 85, 1,
		0, 0, 0, 88, 89, 5, 34, 0, 0, 89, 11, 1, 0, 0, 0, 90, 92, 7, 3, 0, 0, 91,
		90, 1, 0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 91, 1, 0, 0, 0, 93, 94, 1, 0, 0,
		0, 94, 13, 1, 0, 0, 0, 95, 125, 3, 12, 4, 0, 96, 97, 3, 12, 4, 0, 97, 99,
		5, 46, 0, 0, 98, 100, 3, 12, 4, 0, 99, 98, 1, 0, 0, 0, 99, 100, 1, 0, 0,
		0, 100, 106, 1, 0, 0, 0, 101, 103, 5, 69, 0, 0, 102, 104, 7, 4, 0, 0, 103,
		102, 1, 0, 0, 0, 103, 104, 1, 0, 0, 0, 104, 105, 1, 0, 0, 0, 105, 107,
		3, 12, 4, 0, 106, 101, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 125, 1, 0,
		0, 0, 108, 109, 5, 46, 0, 0, 109, 115, 3, 12, 4, 0, 110, 112, 5, 69, 0,
		0, 111, 113, 7, 4, 0, 0, 112, 111, 1, 0, 0, 0, 112, 113, 1, 0, 0, 0, 113,
		114, 1, 0, 0, 0, 114, 116, 3, 12, 4, 0, 115, 110, 1, 0, 0, 0, 115, 116,
		1, 0, 0, 0, 116, 125, 1, 0, 0, 0, 117, 118, 3, 12, 4, 0, 118, 120, 5, 69,
		0, 0, 119, 121, 7, 4, 0, 0, 120, 119, 1, 0, 0, 0, 120, 121, 1, 0, 0, 0,
		121, 122, 1, 0, 0, 0, 122, 123, 3, 12, 4, 0, 123, 125, 1, 0, 0, 0, 124,
		95, 1, 0, 0, 0, 124, 96, 1, 0, 0, 0, 124, 108, 1, 0, 0, 0, 124, 117, 1,
		0, 0, 0, 125, 15, 1, 0, 0, 0, 126, 127, 5, 45, 0, 0, 127, 128, 5, 45, 0,
		0, 128, 129, 1, 0, 0, 0, 129, 130, 6, 6, 0, 0, 130, 131, 6, 6, 1, 0, 131,
		17, 1, 0, 0, 0, 132, 133, 5, 58, 0, 0, 133, 134, 1, 0, 0, 0, 134, 135,
		6, 7, 2, 0, 135, 19, 1, 0, 0, 0, 136, 137, 3, 6, 1, 0, 137, 21, 1, 0, 0,
		0, 138, 140, 7, 5, 0, 0, 139, 138, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141,
		139, 1, 0, 0, 0, 141, 142, 1, 0, 0, 0, 142, 143, 1, 0, 0, 0, 143, 144,
		6, 9, 0, 0, 144, 23, 1, 0, 0, 0, 145, 156, 3, 8, 2, 0, 146, 156, 3, 10,
		3, 0, 147, 148, 5, 45, 0, 0, 148, 156, 3, 14, 5, 0, 149, 156, 5, 45, 0,
		0, 150, 152, 8, 6, 0, 0, 151, 150, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153,
		151, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154, 156, 1, 0, 0, 0, 155, 145,
		1, 0, 0, 0, 155, 146, 1, 0, 0, 0, 155, 147, 1, 0, 0, 0, 155, 149, 1, 0,
		0, 0, 155, 151, 1, 0, 0, 0, 156, 25, 1, 0, 0, 0, 157, 159, 3, 4, 0, 0,
		158, 157, 1, 0, 0, 0, 159, 162, 1, 0, 0, 0, 160, 158, 1, 0, 0, 0, 160,
		161, 1, 0, 0, 0, 161, 163, 1, 0, 0, 0, 162, 160, 1, 0, 0, 0, 163, 164,
		5, 110, 0, 0, 164, 165, 5, 97, 0, 0, 165, 166, 5, 109, 0, 0, 166, 167,
		5, 101, 0, 0, 167, 168, 5, 58, 0, 0, 168, 172, 1, 0, 0, 0, 169, 171, 3,
		4, 0, 0, 170, 169, 1, 0, 0, 0, 171, 174, 1, 0, 0, 0, 172, 170, 1, 0, 0,
		0, 172, 173, 1, 0, 0, 0, 173, 175, 1, 0, 0, 0, 174, 172, 1, 0, 0, 0, 175,
		176, 6, 11, 3, 0, 176, 27, 1, 0, 0, 0, 177, 178, 5, 119, 0, 0, 178, 179,
		5, 104, 0, 0, 179, 180, 5, 101, 0, 0, 180, 181, 5, 110, 0, 0, 181, 182,
		1, 0, 0, 0, 182, 183, 6, 12, 4, 0, 183, 29, 1, 0, 0, 0, 184, 185, 5, 60,
		0, 0, 185, 186, 5, 119, 0, 0, 186, 187, 5, 104, 0, 0, 187, 188, 5, 101,
		0, 0, 188, 189, 5, 110, 0, 0, 189, 190, 1, 0, 0, 0, 190, 191, 6, 13, 4,
		0, 191, 31, 1, 0, 0, 0, 192, 193, 5, 43, 0, 0, 193, 194, 5, 119, 0, 0,
		194, 195, 5, 104, 0, 0, 195, 196, 5, 101, 0, 0, 196, 197, 5, 110, 0, 0,
		197, 198, 1, 0, 0, 0, 198, 199, 6, 14, 4, 0, 199, 33, 1, 0, 0, 0, 200,
		201, 5, 101, 0, 0, 201, 202, 5, 110, 0, 0, 202, 203, 5, 100, 0, 0, 203,
		204, 5, 119, 0, 0, 204, 205, 5, 104, 0, 0, 205, 206, 5, 101, 0, 0, 206,
		207, 5, 110, 0, 0, 207, 211, 1, 0, 0, 0, 208, 210, 3, 4, 0, 0, 209, 208,
		1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211, 212, 1, 0,
		0, 0, 212, 214, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 214, 215, 3, 6, 1, 0,
		215, 216, 1, 0, 0, 0, 216, 217, 6, 15, 4, 0, 217, 35, 1, 0, 0, 0, 218,
		219, 3, 6, 1, 0, 219, 220, 1, 0, 0, 0, 220, 221, 6, 16, 0, 0, 221, 222,
		6, 16, 4, 0, 222, 37, 1, 0, 0, 0, 223, 224, 9, 0, 0, 0, 224, 225, 1, 0,
		0, 0, 225, 226, 6, 17, 0, 0, 226, 39, 1, 0, 0, 0, 227, 231, 7, 7, 0, 0,
		228, 230, 7, 8, 0, 0, 229, 228, 1, 0, 0, 0, 230, 233, 1, 0, 0, 0, 231,
		229, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 41, 1, 0, 0, 0, 233, 231, 1,
		0, 0, 0, 234, 236, 3, 4, 0, 0, 235, 234, 1, 0, 0, 0, 236, 239, 1, 0, 0,
		0, 237, 235, 1, 0, 0, 0, 237, 238, 1, 0, 0, 0, 238, 240, 1, 0, 0, 0, 239,
		237, 1, 0, 0, 0, 240, 241, 3, 6, 1, 0, 241, 242, 1, 0, 0, 0, 242, 243,
		6, 19, 0, 0, 243, 244, 6, 19, 4, 0, 244, 43, 1, 0, 0, 0, 245, 249, 7, 7,
		0, 0, 246, 248, 7, 8, 0, 0, 247, 246, 1, 0, 0, 0, 248, 251, 1, 0, 0, 0,
		249, 247, 1, 0, 0, 0, 249, 250, 1, 0, 0, 0, 250, 45, 1, 0, 0, 0, 251, 249,
		1, 0, 0, 0, 252, 253, 5, 46, 0, 0, 253, 47, 1, 0, 0, 0, 254, 255, 5, 33,
		0, 0, 255, 49, 1, 0, 0, 0, 256, 257, 7, 0, 0, 0, 257, 258, 1, 0, 0, 0,
		258, 259, 6, 23, 0, 0, 259, 260, 6, 23, 4, 0, 260, 51, 1, 0, 0, 0, 261,
		262, 3, 22, 9, 0, 262, 263, 1, 0, 0, 0, 263, 264, 6, 24, 0, 0, 264, 265,
		6, 24, 4, 0, 265, 53, 1, 0, 0, 0, 266, 267, 3, 6, 1, 0, 267, 268, 1, 0,
		0, 0, 268, 269, 6, 25, 5, 0, 269, 270, 6, 25, 4, 0, 270, 55, 1, 0, 0, 0,
		271, 276, 3, 8, 2, 0, 272, 276, 3, 10, 3, 0, 273, 276, 5, 45, 0, 0, 274,
		276, 8, 9, 0, 0, 275, 271, 1, 0, 0, 0, 275, 272, 1, 0, 0, 0, 275, 273,
		1, 0, 0, 0, 275, 274, 1, 0, 0, 0, 276, 277, 1, 0, 0, 0, 277, 278, 6, 26,
		6, 0, 278, 279, 6, 26, 4, 0, 279, 57, 1, 0, 0, 0, 28, 0, 1, 2, 3, 61, 64,
		72, 74, 83, 85, 93, 99, 103, 106, 112, 115, 120, 124, 141, 153, 155, 160,
		172, 211, 231, 237, 249, 275, 7, 6, 0, 0, 5, 1, 0, 5, 3, 0, 2, 2, 0, 4,
		0, 0, 7, 3, 0, 7, 5, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SQLQueryLexerInit initializes any static state used to implement SQLQueryLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewSQLQueryLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func SQLQueryLexerInit() {
	staticData := &SQLQueryLexerLexerStaticData
	staticData.once.Do(sqlquerylexerLexerInit)
}

// NewSQLQueryLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewSQLQueryLexer(input antlr.CharStream) *SQLQueryLexer {
	SQLQueryLexerInit()
	l := new(SQLQueryLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &SQLQueryLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "SQLQueryLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SQLQueryLexer tokens.
const (
	SQLQueryLexerSTARTCOMMENT   = 1
	SQLQueryLexerSTARTEXPR      = 2
	SQLQueryLexerEOL            = 3
	SQLQueryLexerWS             = 4
	SQLQueryLexerSQLTEXT        = 5
	SQLQueryLexerSTARTQUERY     = 6
	SQLQueryLexerSTARTWHEN      = 7
	SQLQueryLexerSTARTCHOMPWHEN = 8
	SQLQueryLexerSTARTJOINWHEN  = 9
	SQLQueryLexerENDWHEN        = 10
	SQLQueryLexerENDCOMMENT     = 11
	SQLQueryLexerRAWCOMMENT     = 12
	SQLQueryLexerQUERY_NAME     = 13
	SQLQueryLexerENDQUERY       = 14
	SQLQueryLexerIDENT          = 15
	SQLQueryLexerIDENT_SEP      = 16
	SQLQueryLexerIDENT_LITERAL  = 17
	SQLQueryLexerSPACE_EXPR     = 18
	SQLQueryLexerWS_EXPR        = 19
)

// SQLQueryLexer modes.
const (
	SQLQueryLexerCommentStart = iota + 1
	SQLQueryLexerQuery
	SQLQueryLexerExpr
)
